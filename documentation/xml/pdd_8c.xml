<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pdd_8c" kind="file" language="C++">
    <compoundname>pdd.c</compoundname>
    <includes local="no">windows.h</includes>
    <includes local="no">serhw.h</includes>
    <includes local="no">nkintr.h</includes>
    <includes local="no">serdbg.h</includes>
    <includes refid="vgd_8h" local="yes">vgd.h</includes>
    <includes refid="pdd_8h" local="yes">pdd.h</includes>
    <incdepgraph>
      <node id="9">
        <label>nmea/generator.h</label>
        <link refid="generator_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>windows.h</label>
      </node>
      <node id="13">
        <label>assert.h</label>
      </node>
      <node id="6">
        <label>vgd.h</label>
        <link refid="vgd_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ddkreg.h</label>
      </node>
      <node id="8">
        <label>config.h</label>
        <link refid="_virtual_g_p_s_jet_2vgps_2driver_2config_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c</label>
        <link refid="pdd_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pdd.h</label>
        <link refid="pdd_8h"/>
      </node>
      <node id="10">
        <label>info.h</label>
        <link refid="info_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>config.h</label>
        <link refid="nmealib-0_85_83_2nmealib_2include_2nmea_2config_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>nkintr.h</label>
      </node>
      <node id="5">
        <label>serdbg.h</label>
      </node>
      <node id="11">
        <label>time.h</label>
        <link refid="time_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>serhw.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="pdd_8c_1afe73a541f8e1bb79e75688bda8e7917b" prot="public" static="no">
        <name>GCI_BUFFER_SIZE</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="102" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pdd_8c_1ae6505bb79f909c6b66f64b47a96f1061" prot="public" static="no" mutable="no">
        <type>const HW_VTBL</type>
        <definition>const HW_VTBL CCIoVTbl</definition>
        <argsstring></argsstring>
        <name>CCIoVTbl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="578" column="9" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="578" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pdd_8c_1aea278206ead7ece30afacef43887a2e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUCHAR</type>
        <definition>static PUCHAR CCSer_InternalMapRegisterAddresses</definition>
        <argsstring>(ULONG HWAddress, ULONG Size)</argsstring>
        <name>CCSer_InternalMapRegisterAddresses</name>
        <param>
          <type>ULONG</type>
          <declname>HWAddress</declname>
        </param>
        <param>
          <type>ULONG</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="16" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="16" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1aed76674709105c9eedd969500d05854d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerSetIRBaudRate</definition>
        <argsstring>(PSER_INFO pHWHead, ULONG baud)</argsstring>
        <name>CCSerSetIRBaudRate</name>
        <param>
          <type><ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref></type>
          <declname>pHWHead</declname>
        </param>
        <param>
          <type>ULONG</type>
          <declname>baud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="48" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="48" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a6fa1883128f7532cd2e7c360e483dc5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_l_i_c_e_n_s_e_8_t_x_t_1a3b083519fd2b41d83363afcfd5ebad9d" kindref="member">void</ref></type>
        <definition>static void CCSerSetOutputMode</definition>
        <argsstring>(PSER_INFO pHWHead, BOOL UseIR, BOOL Use9Pin)</argsstring>
        <name>CCSerSetOutputMode</name>
        <param>
          <type><ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref></type>
          <declname>pHWHead</declname>
        </param>
        <param>
          <type>BOOL</type>
          <declname>UseIR</declname>
        </param>
        <param>
          <type>BOOL</type>
          <declname>Use9Pin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="67" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1ad8049ab5aad3d019d43b978348ec6424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL Ser_GetRegistryData</definition>
        <argsstring>(PSER_INFO pHWHead, LPCTSTR regKeyPath)</argsstring>
        <name>Ser_GetRegistryData</name>
        <param>
          <type><ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref></type>
          <declname>pHWHead</declname>
        </param>
        <param>
          <type>LPCTSTR</type>
          <declname>regKeyPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="100" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="100" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a42e97cec13e20262d224f144ce5abdcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PVOID</type>
        <definition>static PVOID CCSerInit</definition>
        <argsstring>(ULONG Identifier, PVOID pMddHead, PHWOBJ pHWObj)</argsstring>
        <name>CCSerInit</name>
        <param>
          <type>ULONG</type>
          <declname>Identifier</declname>
        </param>
        <param>
          <type>PVOID</type>
          <declname>pMddHead</declname>
        </param>
        <param>
          <type><ref refid="mdd_8h_1a2b4cc80621072e9dda16116cca029671" kindref="member">PHWOBJ</ref></type>
          <declname>pHWObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="194" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="194" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1ac7d3d7e4db4aee0c2684a6a74bd8a98b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ULONG</type>
        <definition>static ULONG CCSerClose</definition>
        <argsstring>(PVOID pHead)</argsstring>
        <name>CCSerClose</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="310" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="310" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a03c81c19c737ca0798a1920e6d5058e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerDeinit</definition>
        <argsstring>(PVOID pHead)</argsstring>
        <name>CCSerDeinit</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="347" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="347" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a6ba282486169ba2c9d92393607054070" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>static VOID CCSerGetCommProperties</definition>
        <argsstring>(PVOID pHead, LPCOMMPROP pCommProp)</argsstring>
        <name>CCSerGetCommProperties</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <param>
          <type>LPCOMMPROP</type>
          <declname>pCommProp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="385" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="385" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a98cd7beeabcb1e3e2dda433fbab59396" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerSetBaudRate</definition>
        <argsstring>(PVOID pHead, ULONG BaudRate)</argsstring>
        <name>CCSerSetBaudRate</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <param>
          <type>ULONG</type>
          <declname>BaudRate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="407" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="407" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a052af8313b9dff31ed4dc9218bd36e5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerPowerOff</definition>
        <argsstring>(PVOID pHead)</argsstring>
        <name>CCSerPowerOff</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="443" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="443" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1aa2e62ae797a91f7ec0f1df72b919a0a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerPowerOn</definition>
        <argsstring>(PVOID pHead)</argsstring>
        <name>CCSerPowerOn</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="468" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="468" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a6ff2458b61881e7e341df9a08d579442" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerEnableIR</definition>
        <argsstring>(PVOID pHead, ULONG BaudRate)</argsstring>
        <name>CCSerEnableIR</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <param>
          <type>ULONG</type>
          <declname>BaudRate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="491" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="491" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a5ac39d4715499083835998cd0ee6d778" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerDisableIR</definition>
        <argsstring>(PVOID pHead)</argsstring>
        <name>CCSerDisableIR</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="514" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="514" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1ae363c871d5af09ac7b4c7069fd45c8d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL CCSerOpen</definition>
        <argsstring>(PVOID pHead)</argsstring>
        <name>CCSerOpen</name>
        <param>
          <type>PVOID</type>
          <declname>pHead</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="534" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="534" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="pdd_8c_1a572a34f7ea81b64a301d58b85a1f1113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="mdd_8h_1a2b4cc80621072e9dda16116cca029671" kindref="member">PHWOBJ</ref></type>
        <definition>PHWOBJ GetSerialObject</definition>
        <argsstring>(DWORD DeviceArrayIndex)</argsstring>
        <name>GetSerialObject</name>
        <param>
          <type>DWORD</type>
          <declname>DeviceArrayIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" line="635" column="1" bodyfile="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c" bodystart="635" bodyend="663"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;serhw.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nkintr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;serdbg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vgd_8h" kindref="compound">vgd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pdd_8h" kindref="compound">pdd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(VGD_USE_LOG==VGD_LOG_MODE_FULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="log_8h" kindref="compound">log.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Miscellaneous<sp/>internal<sp/>routines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">PUCHAR</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">CCSer_InternalMapRegisterAddresses(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>ULONG<sp/><sp/><sp/>HWAddress,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>ULONG<sp/><sp/><sp/>Size</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>PUCHAR<sp/><sp/>ioPortBase;<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG(ZONE_FUNCTION,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;+CCSer_InternalMapRegisterAddresses:<sp/>adr=0x%x<sp/>len=0x%x\r\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HWAddress,<sp/>Size));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ioPortBase<sp/>=<sp/>VirtualAlloc(0,<sp/>Size,<sp/>MEM_RESERVE,<sp/>PAGE_NOACCESS);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ioPortBase<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERRORMSG(1,<sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSer_InternalMapRegisterAddresses:<sp/>VirtualAlloc<sp/>failed!\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!VirtualCopy((PVOID)ioPortBase,<sp/>(PVOID)HWAddress,<sp/>Size,<sp/>PAGE_READWRITE|PAGE_NOCACHE)<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERRORMSG(1,<sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSer_InternalMapRegisterAddresses:<sp/>VirtualCopy<sp/>failed!\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VirtualFree(<sp/>(PVOID)ioPortBase,<sp/>0,<sp/>MEM_RELEASE<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ioPortBase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG(ZONE_FUNCTION,<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;-CCSer_InternalMapRegisterAddresses:<sp/>mapped<sp/>at<sp/>0x%x\r\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ioPortBase<sp/>));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ioPortBase;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="48"><highlight class="normal">CCSerSetIRBaudRate(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ULONG<sp/>baud<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/><sp/><sp/><sp/><sp/>UINT16<sp/>what<sp/>is<sp/>the<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INIT,<sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;Serial<sp/>set<sp/>IR<sp/>Baud<sp/>%d\r\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baud));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>NOTE<sp/>:<sp/>The<sp/>caller<sp/>should<sp/>have<sp/>set<sp/>pHWHead-&gt;fIRMode.<sp/><sp/>It<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>set<sp/>here,<sp/>since<sp/>power<sp/>on/off<sp/>may<sp/>need<sp/>to<sp/>temporarily<sp/>disable</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>the<sp/>intefaces<sp/>without<sp/>actually<sp/>overwriting<sp/>the<sp/>current<sp/>recorded</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>mode.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">CCSerSetOutputMode(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>UseIR,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/><sp/><sp/><sp/><sp/>BOOL<sp/>Should<sp/>we<sp/>use<sp/>IR<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>Use9Pin<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/><sp/><sp/><sp/><sp/>BOOL<sp/>Should<sp/>we<sp/>use<sp/>Wire<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>here<sp/>you<sp/>need<sp/>to<sp/>set<sp/>the<sp/>interface<sp/>to<sp/>either<sp/>IR<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>normal<sp/>serial.<sp/>Note<sp/>that<sp/>it<sp/>is<sp/>possible<sp/>for<sp/>both<sp/>BOOls<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>false<sp/>(i.e.<sp/>power<sp/>down),<sp/>but<sp/>never<sp/>for<sp/>both<sp/>to<sp/>be<sp/>TRUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*++</highlight></codeline>
<codeline lineno="78"><highlight class="comment">*******************************************************************************</highlight></codeline>
<codeline lineno="79"><highlight class="comment">Routine:</highlight></codeline>
<codeline lineno="80"><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>Ser_GetRegistryData</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">Description:</highlight></codeline>
<codeline lineno="84"><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>Take<sp/>the<sp/>registry<sp/>path<sp/>provided<sp/>to<sp/>COM_Init<sp/>and<sp/>use<sp/>it<sp/>to<sp/>find<sp/>this<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>requested<sp/>comm<sp/>port&apos;s<sp/>DeviceArrayIndex,<sp/>teh<sp/>IOPort<sp/>Base<sp/>Address,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>Interrupt<sp/>number.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="comment">Arguments:</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>LPCTSTR<sp/>regKeyPath<sp/><sp/>the<sp/>registry<sp/>path<sp/>passed<sp/>in<sp/>to<sp/>COM_Init.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">Return<sp/>Value:</highlight></codeline>
<codeline lineno="94"><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/>-1<sp/>if<sp/>there<sp/>is<sp/>an<sp/>error.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">*******************************************************************************</highlight></codeline>
<codeline lineno="98"><highlight class="comment">--*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="100" refid="pdd_8c_1ad8049ab5aad3d019d43b978348ec6424" refkind="member"><highlight class="normal"><ref refid="pdd_8c_1ad8049ab5aad3d019d43b978348ec6424" kindref="member">Ser_GetRegistryData</ref>(<ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/>pHWHead,<sp/>LPCTSTR<sp/>regKeyPath)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GCI_BUFFER_SIZE<sp/>256<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>LONG<sp/><sp/><sp/><sp/>regError;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/>HKEY<sp/><sp/><sp/><sp/>hKey;</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>DWORD<sp/><sp/><sp/>dwDataSize<sp/>=<sp/>GCI_BUFFER_SIZE;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/>DDKISRINFO<sp/>dii;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/>DDKWINDOWINFO<sp/>dwi;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/>DEBUGMSG(ZONE_INIT,<sp/>(TEXT(&quot;Try<sp/>to<sp/>open<sp/>%s\r\n&quot;),<sp/>regKeyPath));</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>We&apos;ve<sp/>been<sp/>handed<sp/>the<sp/>name<sp/>of<sp/>a<sp/>key<sp/>in<sp/>the<sp/>registry<sp/>that<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>on<sp/>the<sp/>fly<sp/>by<sp/>device.exe.<sp/><sp/>We&apos;re<sp/>going<sp/>to<sp/>open<sp/>that<sp/>key<sp/>and<sp/>pull<sp/>from<sp/>it</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>a<sp/>value<sp/>that<sp/>is<sp/>the<sp/>name<sp/>of<sp/>this<sp/>serial<sp/>port&apos;s<sp/>real<sp/>key.<sp/><sp/>That<sp/>key</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>will<sp/>have<sp/>the<sp/>DeviceArrayIndex<sp/>that<sp/>we&apos;re<sp/>trying<sp/>to<sp/>find.<sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/>hKey<sp/>=<sp/>OpenDeviceKey(regKeyPath);</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>hKey<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG(ZONE_INIT<sp/>|<sp/>ZONE_ERROR,</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(&quot;Failed<sp/>to<sp/>open<sp/>device<sp/>key\r\n&quot;)));</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(<sp/>FALSE<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>read<sp/>interrupt<sp/>configuration<sp/>parameters</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>dii.cbSize<sp/>=<sp/>sizeof(dii);</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/>regError<sp/>=<sp/>DDKReg_GetIsrInfo(hKey,<sp/>&amp;dii);</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/>if(regError<sp/>==<sp/>ERROR_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(dii.dwSysintr<sp/>!=<sp/>SYSINTR_NOP)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;dwSysIntr<sp/>=<sp/>dii.dwSysintr;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regError<sp/>=<sp/>ERROR_FILE_NOT_FOUND;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;ser16550.dwSysIntr<sp/>=<sp/>pHWHead-&gt;dwSysIntr;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;ser16550.dwIrq<sp/>=<sp/>dii.dwIrq;</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(dii.szIsrDll[0]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;ser16550.RegIsrDll[0]=0;</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG(ZONE_INIT<sp/>|<sp/>ZONE_ERROR,<sp/>(_T(&quot;COM16550:GetRegistryConfig:<sp/>no<sp/>ISR<sp/>DLL<sp/>specified\r\n&quot;)));</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tcscpy(pHWHead-&gt;ser16550.RegIsrDll,<sp/>dii.szIsrDll);</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(dii.szIsrHandler[0]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;ser16550.RegIsrHandler[0]=0;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG(ZONE_INIT<sp/>|<sp/>ZONE_ERROR,<sp/>(_T(&quot;COM16550:GetRegistryConfig:<sp/>no<sp/>ISR<sp/>handler<sp/>specified\r\n&quot;)));</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tcscpy(pHWHead-&gt;ser16550.RegIsrHandler,<sp/>dii.szIsrHandler);</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>regError<sp/>==<sp/>ERROR_SUCCESS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dwi.cbSize<sp/>=<sp/>sizeof(dwi);</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regError<sp/>=<sp/>DDKReg_GetWindowInfo(hKey,<sp/>&amp;dwi);</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(regError<sp/>==<sp/>ERROR_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(dwi.dwNumMemWindows<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;dwMemBase<sp/>=<sp/>dwi.memWindows[0].dwBase;</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;dwMemLen<sp/>=<sp/>dwi.memWindows[0].dwLen;</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regError<sp/>=<sp/>ERROR_FILE_NOT_FOUND;</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/>RegCloseKey<sp/>(hKey);</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>regError<sp/>!=<sp/>ERROR_SUCCESS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG(ZONE_INIT<sp/>|<sp/>ZONE_ERROR,</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(&quot;Failed<sp/>to<sp/>get<sp/>serial<sp/>registry<sp/>values,<sp/>Error<sp/>0x%X\r\n&quot;),</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regError));</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(<sp/>FALSE<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(<sp/>ZONE_INIT,</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(&quot;SerInit<sp/>-<sp/>SysIntr<sp/>%d,<sp/>HD64465<sp/>UART<sp/>base<sp/>addr<sp/>%X<sp/>\r\n&quot;),</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;dwSysIntr,<sp/>pHWHead-&gt;dwMemBase));</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>TRUE<sp/>);<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>@doc<sp/>OEM<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>@func<sp/>PVOID<sp/>|<sp/>CCSerInit<sp/>|<sp/>Initializes<sp/>device<sp/>identified<sp/>by<sp/>argument.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>routine<sp/>sets<sp/>information<sp/>controlled<sp/>by<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>such<sp/>as<sp/>Line<sp/>control<sp/>and<sp/>baud<sp/>rate.<sp/>It<sp/>can<sp/>also<sp/>initialize<sp/>events<sp/>and</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>interrupts,<sp/>thereby<sp/>indirectly<sp/>managing<sp/>initializing<sp/>hardware<sp/>buffers.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>Exported<sp/>only<sp/>to<sp/>driver,<sp/>called<sp/>only<sp/>once<sp/>per<sp/>process.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>@rdesc<sp/>The<sp/>return<sp/>value<sp/>is<sp/>a<sp/>PVOID<sp/>to<sp/>be<sp/>passed<sp/>back<sp/>into<sp/>the<sp/>HW</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>dependent<sp/>layer<sp/>when<sp/>HW<sp/>functions<sp/>are<sp/>called.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">PVOID</highlight></codeline>
<codeline lineno="194"><highlight class="normal">CCSerInit(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>ULONG<sp/><sp/><sp/>Identifier,<sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>Device<sp/>identifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pMddHead,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>First<sp/>argument<sp/>to<sp/>mdd<sp/>callbacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mdd_8h_1a2b4cc80621072e9dda16116cca029671" kindref="member">PHWOBJ</ref><sp/><sp/>pHWObj<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>Pointer<sp/>to<sp/>our<sp/>own<sp/>HW<sp/>OBJ<sp/>for<sp/>this<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>on<sp/>defaults.<sp/><sp/>While<sp/>the<sp/>PC<sp/>typcially<sp/>considers<sp/>COM1<sp/>to<sp/>be<sp/>at<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3F8,<sp/>irq4<sp/>and<sp/>COM2<sp/>to<sp/>be<sp/>2F8,<sp/>irq3,<sp/>NKPC<sp/>uses<sp/>COM1<sp/>internally<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debugger.<sp/><sp/>So,<sp/>when<sp/>NK<sp/>tells<sp/>me<sp/>to<sp/>start<sp/>&quot;COM1&quot;<sp/>it<sp/>really<sp/>means<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>one<sp/>that&apos;s<sp/>available,<sp/>which<sp/>is<sp/>what<sp/>the<sp/>PC<sp/>calls<sp/>COM2.<sp/><sp/>Confused?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>end<sp/>result<sp/>is<sp/>that<sp/>COM1<sp/>on<sp/>NK<sp/>is<sp/>what<sp/>the<sp/>PC<sp/>considers<sp/>to<sp/>be<sp/>COM2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>wait,<sp/>there&apos;s<sp/>more.<sp/><sp/>On<sp/>a<sp/>Puzzle,<sp/>the<sp/>debugger<sp/>is<sp/>on<sp/>COM2<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>COM1<sp/>for<sp/>NK<sp/>is<sp/>ACTUALLY<sp/>COM1.<sp/><sp/>So<sp/>PCs<sp/>need<sp/>2F8<sp/>for<sp/>their<sp/>port<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>Puzzles<sp/>need<sp/>3F8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT<sp/>cDefaultCom1PortBase<sp/>=<sp/>0x2F8;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT<sp/>cDefaultComPortRange<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INIT,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;+SerInit,<sp/>pMddHead:<sp/>x%X\r\n&quot;</highlight><highlight class="normal">),<sp/>pMddHead));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>for<sp/>our<sp/>main<sp/>data<sp/>structure<sp/>and<sp/>one<sp/>of<sp/>it&apos;s<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)LocalAlloc(<sp/>LMEM_ZEROINIT|LMEM_FIXED<sp/>,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">SER_INFO</ref>)<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pHWHead)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ALLOCFAILED;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pHWHead-&gt;dwSysIntr<sp/>=<sp/>pHWObj-&gt;dwIntID;<sp/>//<sp/>Initial<sp/>to<sp/>default<sp/>vaule;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a9a99aa5f0b6198b619d0690614913d6b" kindref="member">pHWObj</ref><sp/>=<sp/>pHWObj;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/><ref refid="pdd_8c_1ad8049ab5aad3d019d43b978348ec6424" kindref="member">Ser_GetRegistryData</ref>(pHWHead,<sp/>(LPCTSTR)Identifier)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INIT|ZONE_ERROR,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;SerInit<sp/>-<sp/>Unable<sp/>to<sp/>read<sp/>registry<sp/>data.<sp/><sp/>Failing<sp/>Init<sp/>!!!<sp/>\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ALLOCFAILED;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWObj-&gt;dwIntID<sp/>=<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a249ed99955afba550db148aa4cdb36e6" kindref="member">dwSysIntr</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>call<sp/>will<sp/>map<sp/>the<sp/>address<sp/>space<sp/>for<sp/>the<sp/>16550<sp/>UART.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1ad43a415a0198642b163fe7a12c11f4df" kindref="member">pBaseAddress</ref><sp/><sp/><sp/>=<sp/>CCSer_InternalMapRegisterAddresses(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a0b7adfaeb5d71d58429c18a1de3c8e93" kindref="member">dwMemBase</ref>,<sp/>0x400);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1ad13052d01cd1668b7fb6aee77c0d4503" kindref="member">pMddHead</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>pMddHead;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>our<sp/>Comm<sp/>Properties<sp/>data<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.wPacketLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xffff;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.wPacketVersion<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xffff;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwServiceMask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SP_SERIALCOMM;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwReserved1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwMaxTxQueue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwMaxRxQueue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwMaxBaud<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>BAUD_115200;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwProvSubType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PST_RS232;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwProvCapabilities<sp/><sp/><sp/><sp/>=</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCF_DTRDSR<sp/>|<sp/>PCF_RLSD<sp/>|<sp/>PCF_RTSCTS<sp/>|</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCF_SETXCHAR<sp/>|</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCF_INTTIMEOUTS<sp/>|</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCF_PARITY_CHECK<sp/>|</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCF_SPECIALCHARS<sp/>|</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCF_TOTALTIMEOUTS<sp/>|</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCF_XONXOFF;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwSettableBaud<sp/><sp/><sp/><sp/><sp/><sp/>=</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BAUD_075<sp/>|<sp/>BAUD_110<sp/>|<sp/>BAUD_150<sp/>|<sp/>BAUD_300<sp/>|<sp/>BAUD_600<sp/>|</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BAUD_1200<sp/>|<sp/>BAUD_1800<sp/>|<sp/>BAUD_2400<sp/>|<sp/>BAUD_4800<sp/>|</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BAUD_7200<sp/>|<sp/>BAUD_9600<sp/>|<sp/>BAUD_14400<sp/>|</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BAUD_19200<sp/>|<sp/>BAUD_38400<sp/>|<sp/>BAUD_56K<sp/>|<sp/>BAUD_128K<sp/>|</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BAUD_115200<sp/>|<sp/>BAUD_57600<sp/>|<sp/>BAUD_USER;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.dwSettableParams<sp/><sp/><sp/><sp/>=</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SP_BAUD<sp/>|<sp/>SP_DATABITS<sp/>|<sp/>SP_HANDSHAKING<sp/>|<sp/>SP_PARITY<sp/>|</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SP_PARITY_CHECK<sp/>|<sp/>SP_RLSD<sp/>|<sp/>SP_STOPBITS;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.wSettableData<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DATABITS_5<sp/>|<sp/>DATABITS_6<sp/>|<sp/>DATABITS_7<sp/>|<sp/>DATABITS_8;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>.wSettableStopParity<sp/>=</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STOPBITS_10<sp/>|<sp/>STOPBITS_20<sp/>|</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PARITY_NONE<sp/>|<sp/>PARITY_ODD<sp/>|<sp/>PARITY_EVEN<sp/>|<sp/>PARITY_SPACE<sp/>|</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PARITY_MARK;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>chip<sp/>data,<sp/>register<sp/>stride<sp/>is<sp/>1<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INIT,<sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerInit<sp/>-<sp/>Init<sp/>chip<sp/>data\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="vgd_8c_1ae9aac5c7827d7ce0d12d81d5d507b04a" kindref="member">SL_Init</ref>(<sp/>Identifier,<sp/>pHWHead,<sp/>pMddHead<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INIT|ZONE_ERROR,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerInit<sp/>-<sp/><sp/>SL_Init<sp/>return<sp/>fail<sp/>!!!<sp/>\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ALLOCFAILED;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INIT,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerInit<sp/>-<sp/>Disabling<sp/>UART<sp/>Power\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/><sp/>=<sp/>FALSE;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>wired<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerSetOutputMode(pHWHead,<sp/>FALSE,<sp/>FALSE<sp/>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INIT,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;-SerInit,<sp/>pHWHead:<sp/>x%X,<sp/>pHWHead-&gt;pMddHead:<sp/>x%X\r\n&quot;</highlight><highlight class="normal">),<sp/>pHWHead,<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1ad13052d01cd1668b7fb6aee77c0d4503" kindref="member">pMddHead</ref>));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pHWHead;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal">ALLOCFAILED:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pHWHead)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1ad43a415a0198642b163fe7a12c11f4df" kindref="member">pBaseAddress</ref><sp/>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VirtualFree(pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1ad43a415a0198642b163fe7a12c11f4df" kindref="member">pBaseAddress</ref>,<sp/>0,<sp/>MEM_RELEASE);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalFree(pHWHead);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>@func<sp/>ULONG<sp/>|<sp/>CCSerClose<sp/>|<sp/>This<sp/>routine<sp/>closes<sp/>the<sp/>device<sp/>identified<sp/>by<sp/>the<sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerInit.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>Not<sp/>exported<sp/>to<sp/>users,<sp/>only<sp/>to<sp/>driver.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>@rdesc<sp/>The<sp/>return<sp/>value<sp/>is<sp/>0.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">ULONG</highlight></codeline>
<codeline lineno="310"><highlight class="normal">CCSerClose(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerInit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ULONG<sp/><sp/>uTries;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_CLOSE,(TEXT(</highlight><highlight class="stringliteral">&quot;+CCSerClose\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref><sp/>)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_CLOSE,<sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerClose,<sp/>closing<sp/>device\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref>--;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>device<sp/>is<sp/>closed,<sp/>we<sp/>power<sp/>it<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_CLOSE,<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerClose<sp/>-<sp/>Powering<sp/>down<sp/>UART\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/><sp/>=<sp/>FALSE;<sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCSerSetOutputMode(pHWHead,<sp/>FALSE,<sp/>FALSE<sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_CLOSE,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerClose<sp/>-<sp/>Calling<sp/>SL_Close\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a4637f3fe5580e7483e82d393cdcfa1d1" kindref="member">SL_Close</ref>(pHead);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_CLOSE,(TEXT(</highlight><highlight class="stringliteral">&quot;-CCSerClose\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>@doc<sp/>OEM<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>@func<sp/>PVOID<sp/>|<sp/>CCSerDeinit<sp/>|<sp/>Deinitializes<sp/>device<sp/>identified<sp/>by<sp/>argument.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>routine<sp/>frees<sp/>any<sp/>memory<sp/>allocated<sp/>by<sp/>CCSerInit.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="347"><highlight class="normal">CCSerDeinit(</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerInit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INFO,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;+CCSerDeinit,<sp/>0x%X\r\n&quot;</highlight><highlight class="normal">),<sp/>pHWHead));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pHWHead<sp/>)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>device<sp/>is<sp/>closed<sp/>before<sp/>doing<sp/>DeInit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref><sp/>)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCSerClose(<sp/>pHead<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deinit<sp/>chip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a670a3e171514c124df2cadb5c069ce8e" kindref="member">SL_Deinit</ref>(pHead);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1ad43a415a0198642b163fe7a12c11f4df" kindref="member">pBaseAddress</ref><sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VirtualFree(pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1ad43a415a0198642b163fe7a12c11f4df" kindref="member">pBaseAddress</ref>,<sp/>0,<sp/>MEM_RELEASE);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalFree(pHWHead);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_INFO,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;-CCSerDeinit,<sp/>0x%X\r\n&quot;</highlight><highlight class="normal">),<sp/>pHWHead));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>@func<sp/><sp/>VOID<sp/>|<sp/>CCSerGetCommProperties<sp/>|<sp/>Retrieves<sp/>Comm<sp/>Properties.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>@rdesc<sp/>None.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">VOID</highlight></codeline>
<codeline lineno="385"><highlight class="normal">CCSerGetCommProperties(</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerInit.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>LPCOMMPROP<sp/><sp/>pCommProp<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>Pointer<sp/>to<sp/>receive<sp/>COMMPROP<sp/>structure.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>*pCommProp<sp/>=<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1a7300d464646eb98cc8c7ff97479297fc" kindref="member">CommProp</ref>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>@func<sp/>VOID<sp/>|<sp/>CCSerSetBaudRate<sp/>|</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>This<sp/>routine<sp/>sets<sp/>the<sp/>baud<sp/>rate<sp/>of<sp/>the<sp/>device.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/><sp/>Not<sp/>exported<sp/>to<sp/>users,<sp/>only<sp/>to<sp/>driver.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>@rdesc<sp/>None.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="407"><highlight class="normal">CCSerSetBaudRate(</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead,<sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/><sp/><sp/><sp/><sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerInit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>ULONG<sp/><sp/><sp/>BaudRate<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/><sp/><sp/><sp/><sp/>ULONG<sp/>representing<sp/>decimal<sp/>baud<sp/>rate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>running<sp/>in<sp/>IR<sp/>mode,<sp/>try<sp/>to<sp/>set<sp/>the<sp/>IR<sp/>baud</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first,<sp/>since<sp/>it<sp/>supports<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>rates<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>UART.<sp/><sp/>If<sp/>we<sp/>fail<sp/>setting<sp/>the<sp/>IR<sp/>rate,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>an<sp/>error<sp/>and<sp/>leave<sp/>the<sp/>UART<sp/>alone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/>)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>CCSerSetIRBaudRate(<sp/>pHWHead,<sp/>BaudRate<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_ERROR,<sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>IR<sp/>BaudRate\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>return<sp/>an<sp/>error,<sp/>but<sp/>vtbl<sp/>doesn&apos;t<sp/>expect<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>set<sp/>buadrate<sp/>on<sp/>the<sp/>UART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<sp/><ref refid="vgd_8c_1a8e170e0f69f5329bed3dab8635f4285f" kindref="member">SL_SetBaudRate</ref>(<sp/>pHead,<sp/>BaudRate<sp/>)<sp/>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>@func<sp/>BOOL<sp/>|<sp/>CCSerPowerOff<sp/>|</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/><sp/>Called<sp/>by<sp/>driver<sp/>to<sp/>turn<sp/>off<sp/>power<sp/>to<sp/>serial<sp/>port.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/><sp/>Not<sp/>exported<sp/>to<sp/>users,<sp/>only<sp/>to<sp/>driver.</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>@rdesc<sp/>This<sp/>routine<sp/>returns<sp/>a<sp/>status.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="443"><highlight class="normal">CCSerPowerOff(</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/><sp/><sp/><sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerInit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>power<sp/>down<sp/>the<sp/>UART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a148df9b708aa2f615976b78ffa5d0b59" kindref="member">SL_PowerOff</ref>(<sp/>pHWHead<sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>then<sp/>disable<sp/>our<sp/>IR<sp/>and<sp/>9<sp/>Pin<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerSetOutputMode(<sp/>pHWHead,<sp/>FALSE,<sp/>FALSE<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>@func<sp/>BOOL<sp/>|<sp/>CCSerPowerOn<sp/>|</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/><sp/>Called<sp/>by<sp/>driver<sp/>to<sp/>turn<sp/>on<sp/>power<sp/>to<sp/>serial<sp/>port.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/><sp/>Not<sp/>exported<sp/>to<sp/>users,<sp/>only<sp/>to<sp/>driver.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>@rdesc<sp/>This<sp/>routine<sp/>returns<sp/>a<sp/>status.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="468"><highlight class="normal">CCSerPowerOn(</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/><sp/><sp/><sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerInit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>power<sp/>up<sp/>the<sp/>UART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a9bb9ba4f5466651cdfbe6b58b162eb8b" kindref="member">SL_PowerOn</ref>(<sp/>pHWHead<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>then<sp/>enable<sp/>our<sp/>IR<sp/>interface<sp/>(if<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerSetOutputMode(<sp/>pHWHead,<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref>,<sp/>!pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>@func<sp/>BOOL<sp/>|<sp/>CCSerEnableIR<sp/>|<sp/>This<sp/>routine<sp/>enables<sp/>ir.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/><sp/>Not<sp/>exported<sp/>to<sp/>users,<sp/>only<sp/>to<sp/>driver.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>@rdesc<sp/>Returns<sp/>TRUE<sp/>if<sp/>successful,<sp/>FALSEotherwise.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="491"><highlight class="normal">CCSerEnableIR(</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead,<sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerinit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>ULONG<sp/><sp/><sp/>BaudRate<sp/><sp/></highlight><highlight class="comment">//<sp/>@parm<sp/>PVOID<sp/>returned<sp/>by<sp/>HWinit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>sure<sp/>why<sp/>he<sp/>passes<sp/>baudRate<sp/>when<sp/>its<sp/>already<sp/>in<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pHWHead.<sp/><sp/>So<sp/>I&apos;ll<sp/>ignore<sp/>it<sp/>and<sp/>use<sp/>the<sp/>one<sp/>in<sp/>our<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/><sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerSetOutputMode(<sp/>pHWHead,<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref>,<sp/>!pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>@func<sp/>BOOL<sp/>|<sp/>CCSerDisableIR<sp/>|<sp/>This<sp/>routine<sp/>disable<sp/>the<sp/>ir.</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/><sp/>Not<sp/>exported<sp/>to<sp/>users,<sp/>only<sp/>to<sp/>driver.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>@rdesc<sp/>Returns<sp/>TRUE<sp/>if<sp/>successful,<sp/>FALSEotherwise.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="514"><highlight class="normal">CCSerDisableIR(</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead<sp/></highlight><highlight class="comment">/*@parm<sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerinit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerSetOutputMode(<sp/>pHWHead,<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref>,<sp/>!pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>@doc<sp/>OEM</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>@func<sp/>BOOL<sp/>|<sp/>CCSerOpen<sp/>|<sp/>This<sp/>routine<sp/>is<sp/>called<sp/>when<sp/>the<sp/>port<sp/>is<sp/>opened.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/><sp/>Not<sp/>exported<sp/>to<sp/>users,<sp/>only<sp/>to<sp/>driver.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>@rdesc<sp/>Returns<sp/>TRUE<sp/>if<sp/>successful,<sp/>FALSEotherwise.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">BOOL</highlight></codeline>
<codeline lineno="534"><highlight class="normal">CCSerOpen(</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>PVOID<sp/><sp/><sp/>pHead<sp/></highlight><highlight class="comment">/*@parm<sp/>PVOID<sp/>returned<sp/>by<sp/>CCSerinit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_____s_e_r___i_n_f_o" kindref="compound">PSER_INFO</ref><sp/><sp/><sp/>pHWHead<sp/>=<sp/>(<ref refid="pdd_8h_1a1206f96fb522042946b9354dc81ba15f" kindref="member">PSER_INFO</ref>)pHead;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_OPEN,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;+CCSerOpen\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!VGD_MULTIOPEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disallow<sp/>multiple<sp/>simultaneous<sp/>opens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref>++<sp/>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_ERROR,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerOpen<sp/>-<sp/>multiple<sp/>open,<sp/>fail<sp/>(%d<sp/>opens)\r\n&quot;</highlight><highlight class="normal">),<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref>));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>++pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_OPEN,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerOpen<sp/>-<sp/>Selecting<sp/>Non<sp/>IR<sp/>Mode\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/><sp/>=<sp/>FALSE;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>wired<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerSetOutputMode(pHWHead,<sp/>pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref>,<sp/>!pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1adc9551a22df5c9185991c5d6edc769c4" kindref="member">fIRMode</ref><sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_OPEN,<sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerOpen<sp/>-<sp/>Calling<sp/>SL_Open\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="vgd_8c_1ad58ab64d74bd3cb24cbbb8d6cb33fe93" kindref="member">SL_Open</ref>(<sp/>pHWHead<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_ERROR,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;CCSerOpen<sp/>-<sp/>SL_Open,<sp/>fail<sp/>!!!\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--pHWHead-&gt;<ref refid="struct_____s_e_r___i_n_f_o_1af2278b1f046b8ef29741db37a96a1680" kindref="member">cOpenCount</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUGMSG<sp/>(ZONE_OPEN,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TEXT(</highlight><highlight class="stringliteral">&quot;-CCSerOpen\r\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="pdd_8c_1ae6505bb79f909c6b66f64b47a96f1061" refkind="member"><highlight class="normal">HW_VTBL<sp/><ref refid="pdd_8c_1ae6505bb79f909c6b66f64b47a96f1061" kindref="member">CCIoVTbl</ref>=<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerInit,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a2dcb3e6f94fb6c577956bf9d7cee4bf8" kindref="member">SL_PostInit</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerDeinit,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerOpen,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerClose,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a3ed81e2a057466937568f2f74f52ee1f" kindref="member">SL_GetInterruptType</ref>,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a87d52d92d4604c42090edd1c6d694a86" kindref="member">SL_RxIntr</ref>,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a07343c3423bb270fc82409e00c11fe75" kindref="member">SL_TxIntrEx</ref>,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a56b1822ce112a85a77c8949f78444466" kindref="member">SL_ModemIntr</ref>,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1ad6a639db53d6ea41a5b73ff336a02040" kindref="member">SL_LineIntr</ref>,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a85ad6d6715f2ffe9069660cf95d0910a" kindref="member">SL_GetRxBufferSize</ref>,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerPowerOff,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerPowerOn,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1ae2aaac4db4ee054f855e30a47efb7dbf" kindref="member">SL_ClearDTR</ref>,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1aa3d93951525bed2d787a2c8648108ad3" kindref="member">SL_SetDTR</ref>,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a2b4ca8717a85f8a32e196e91fba06d49" kindref="member">SL_ClearRTS</ref>,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a28d01996bb54f3d919a24403b812f805" kindref="member">SL_SetRTS</ref>,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerEnableIR,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerDisableIR,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a56697cafe94654bef8b52774237c864f" kindref="member">SL_ClearBreak</ref>,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a1f5fa3aa36cb449a1156cef0baa833d1" kindref="member">SL_SetBreak</ref>,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1ad7b32102dd68d91313ab0dcdc909edf9" kindref="member">SL_XmitComChar</ref>,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1af6cd3fb902a0e7f48810705a24754cf4" kindref="member">SL_GetStatus</ref>,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a3be92f7f38bea7c320a72ea123802120" kindref="member">SL_Reset</ref>,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1adfa9559212ec5346dd01c87b7233a8c6" kindref="member">SL_GetModemStatus</ref>,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>CCSerGetCommProperties,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a8677382a48e11b2afd2c5175a20e08b0" kindref="member">SL_PurgeComm</ref>,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a48ab16c898d456777dc4de2f13e0e6c9" kindref="member">SL_SetDCB</ref>,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1a177ecc59b3657e4ae3d34211689cc7c7" kindref="member">SL_SetCommTimeouts</ref>,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vgd_8c_1ad5ddf4f3df4051e7144b14be50f2ea84" kindref="member">SL_Ioctl</ref></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="611"><highlight class="comment">//<sp/>GetSerialObj<sp/>:<sp/>The<sp/>purpose<sp/>of<sp/>this<sp/>function<sp/>is<sp/>to<sp/>allow<sp/>multiple<sp/>PDDs<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="612"><highlight class="comment">//<sp/>linked<sp/>with<sp/>a<sp/>single<sp/>MDD<sp/>creating<sp/>a<sp/>multiport<sp/>driver.<sp/><sp/>In<sp/>such<sp/>a<sp/>driver,<sp/>the</highlight></codeline>
<codeline lineno="613"><highlight class="comment">//<sp/>MDD<sp/>must<sp/>be<sp/>able<sp/>to<sp/>determine<sp/>the<sp/>correct<sp/>vtbl<sp/>and<sp/>associated<sp/>parameters<sp/>for</highlight></codeline>
<codeline lineno="614"><highlight class="comment">//<sp/>each<sp/>PDD.<sp/><sp/>Immediately<sp/>prior<sp/>to<sp/>calling<sp/>HWInit,<sp/>the<sp/>MDD<sp/>calls<sp/>GetSerialObject</highlight></codeline>
<codeline lineno="615"><highlight class="comment">//<sp/>to<sp/>get<sp/>the<sp/>correct<sp/>function<sp/>pointers<sp/>and<sp/>parameters.</highlight></codeline>
<codeline lineno="616"><highlight class="comment">//</highlight></codeline>
<codeline lineno="617"><highlight class="comment">HWOBJ<sp/><sp/><sp/>SerObj<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/><sp/>THREAD_AT_INIT,</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/><sp/><sp/>(PHW_VTBL)<sp/>&amp;CCIoVTbl</highlight></codeline>
<codeline lineno="621"><highlight class="comment">};</highlight></codeline>
<codeline lineno="622"><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment">PHWOBJ</highlight></codeline>
<codeline lineno="624"><highlight class="comment">GetSerialObject(</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/>DWORD<sp/>DeviceArrayIndex</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="627"><highlight class="comment">{</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(&amp;SerObj);</highlight></codeline>
<codeline lineno="629"><highlight class="comment">}</highlight></codeline>
<codeline lineno="630"><highlight class="comment"></highlight></codeline>
<codeline lineno="631"><highlight class="comment"></highlight></codeline>
<codeline lineno="632"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><ref refid="mdd_8h_1a2b4cc80621072e9dda16116cca029671" kindref="member">PHWOBJ</ref></highlight></codeline>
<codeline lineno="635" refid="pdd_8c_1a572a34f7ea81b64a301d58b85a1f1113" refkind="member"><highlight class="normal"><ref refid="pdd_8c_1a572a34f7ea81b64a301d58b85a1f1113" kindref="member">GetSerialObject</ref>(</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>DeviceArrayIndex</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mdd_8h_1a2b4cc80621072e9dda16116cca029671" kindref="member">PHWOBJ</ref><sp/>pSerObj;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>many<sp/>other<sp/>serial<sp/>samples,<sp/>we<sp/>do<sp/>not<sp/>have<sp/>a<sp/>statically<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>HWObjs.<sp/><sp/>Instead,<sp/>we<sp/>allocate<sp/>a<sp/>new<sp/>HWObj<sp/>for<sp/>each<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>driver.<sp/><sp/>The<sp/>MDD<sp/>will<sp/>always<sp/>call<sp/>GetSerialObj/HWInit/HWDeinit<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>order,<sp/>so<sp/>we<sp/>can<sp/>do<sp/>the<sp/>alloc<sp/>here<sp/>and<sp/>do<sp/>any<sp/>subsequent<sp/>free<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HWDeInit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>space<sp/>for<sp/>the<sp/>HWOBJ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>pSerObj<sp/>=<sp/>(<ref refid="mdd_8h_1a2b4cc80621072e9dda16116cca029671" kindref="member">PHWOBJ</ref>)LocalAlloc(<sp/>LMEM_ZEROINIT|LMEM_FIXED<sp/>,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="mdd_8h_1a9f9979002850555692dcdfe3abc39b68" kindref="member">HWOBJ</ref>)<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pSerObj<sp/>)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(NULL);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>the<sp/>HWObj<sp/>structure<sp/>that<sp/>we<sp/>just<sp/>allocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>THREAD_AT_OPEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>pSerObj-&gt;BindFlags<sp/>=<sp/>THREAD_IN_PDD;</highlight><highlight class="comment">//THREAD_AT_OPEN;//THREAD_IN_PDD;<sp/><sp/><sp/><sp/><sp/>//<sp/>Have<sp/>MDD<sp/>create<sp/>thread<sp/>when<sp/>device<sp/>is<sp/>first<sp/>opened.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>pSerObj-&gt;dwIntID<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SysIntr<sp/>is<sp/>filled<sp/>in<sp/>at<sp/>init<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>pSerObj-&gt;pFuncTbl<sp/>=<sp/>(HW_VTBL<sp/>*)<sp/>&amp;<ref refid="pdd_8c_1ae6505bb79f909c6b66f64b47a96f1061" kindref="member">CCIoVTbl</ref>;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>pointer<sp/>to<sp/>appropriate<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>return<sp/>this<sp/>structure<sp/>to<sp/>the<sp/>MDD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pSerObj);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/karst/Google Drive/ProjectNet/Projekter/NMEA connector/Inspiration/VirtualGPSJet/vgps/driver/pdd.c"/>
  </compounddef>
</doxygen>
